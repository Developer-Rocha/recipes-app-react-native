{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\fabricio\\\\Privado\\\\Jobs\\\\Academicos\\\\react-native\\\\recipes-app-react-native\\\\src\\\\screens\\\\Dummy\\\\DummyScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport styles from \"./styles\";\nimport { getRecipes, getCategoryName } from \"../../data/MockDataAPI\";\nimport { ApolloProvider, useQuery } from \"@apollo/client\";\nimport { NODE, client } from \"../../data/Queries\";\n\nfunction ShowNode() {\n  var $nid = \"1\";\n\n  var _useQuery = useQuery(NODE, {\n    variables: {\n      id: $nid,\n      language: \"PT_PT\"\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (error) {\n    console.log(\"Error fetching starship\", error);\n  }\n\n  if (data != undefined && data != null) {\n    var _infoBox = data.page.bundle ? data.page.bundle : \"NULL\";\n\n    console.log(data);\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 3\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 4\n    }\n  }, \"Resultado da query:\"), data != undefined && data.nodeById != null ? React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 6\n    }\n  }, \" \", data.page.title, \" \"), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 6\n    }\n  }, \" \", infoBox, \" \")) : React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Sem resultado.\"));\n}\n\nvar DummyScreen = function (_React$Component) {\n  _inherits(DummyScreen, _React$Component);\n\n  var _super = _createSuper(DummyScreen);\n\n  function DummyScreen(props) {\n    _classCallCheck(this, DummyScreen);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(DummyScreen, [{\n    key: \"render\",\n    value: function render() {\n      var navigation = this.props.navigation;\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 4\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 5\n        }\n      }, \"Hello world\"), React.createElement(ApolloProvider, {\n        client: client,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 5\n        }\n      }, React.createElement(ShowNode, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 6\n        }\n      })));\n    }\n  }]);\n\n  return DummyScreen;\n}(React.Component);\n\nDummyScreen.navigationOptions = {\n  title: \"Dummy Page\"\n};\nexport { DummyScreen as default };","map":{"version":3,"sources":["C:/fabricio/Privado/Jobs/Academicos/react-native/recipes-app-react-native/src/screens/Dummy/DummyScreen.js"],"names":["React","styles","getRecipes","getCategoryName","ApolloProvider","useQuery","NODE","client","ShowNode","$nid","variables","id","language","data","error","loading","console","log","undefined","infoBox","page","bundle","nodeById","title","DummyScreen","props","navigation","Component","navigationOptions"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,MAAP;AACA,SAASC,UAAT,EAAqBC,eAArB;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,gBAAzC;AACA,SAASC,IAAT,EAAeC,MAAf;;AAEA,SAASC,QAAT,GAAoB;AACnB,MAAIC,IAAI,GAAG,GAAX;;AADmB,kBAEcJ,QAAQ,CAACC,IAAD,EAAO;AAC/CI,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEF,IAAN;AAAYG,MAAAA,QAAQ,EAAE;AAAtB;AADoC,GAAP,CAFtB;AAAA,MAEXC,IAFW,aAEXA,IAFW;AAAA,MAELC,KAFK,aAELA,KAFK;AAAA,MAEEC,OAFF,aAEEA,OAFF;;AAMnB,MAAID,KAAJ,EAAW;AACVE,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCH,KAAvC;AACA;;AAED,MAAID,IAAI,IAAIK,SAAR,IAAqBL,IAAI,IAAI,IAAjC,EAAuC;AACtC,QAAIM,QAAO,GAAGN,IAAI,CAACO,IAAL,CAAUC,MAAV,GAAmBR,IAAI,CAACO,IAAL,CAAUC,MAA7B,GAAsC,MAApD;;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA;;AAED,SACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADD,EAEEA,IAAI,IAAIK,SAAR,IAAqBL,IAAI,CAACS,QAAL,IAAiB,IAAtC,GACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQT,IAAI,CAACO,IAAL,CAAUG,KAAlB,MADD,EAEC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQJ,OAAR,MAFD,CADA,GAMA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBARF,CADD;AAaA;;IAEoBK,W;;;;;AAKpB,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA,6BACZA,KADY;AAElB;;;;WAED,kBAAS;AAAA,UACAC,UADA,GACe,KAAKD,KADpB,CACAC,UADA;AAGR,aACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,EAEC,oBAAC,cAAD;AAAgB,QAAA,MAAM,EAAEnB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CAFD,CADD;AAQA;;;;EApBuCP,KAAK,CAAC2B,S;;AAA1BH,W,CACbI,iB,GAAoB;AAC1BL,EAAAA,KAAK,EAAE;AADmB,C;SADPC,W","sourcesContent":["import React from \"react\";\r\nimport { Text, View, Image } from \"react-native\";\r\nimport styles from \"./styles\";\r\nimport { getRecipes, getCategoryName } from \"../../data/MockDataAPI\";\r\nimport { ApolloProvider, useQuery } from \"@apollo/client\";\r\nimport { NODE, client } from \"../../data/Queries\";\r\n\r\nfunction ShowNode() {\r\n\tlet $nid = \"1\";\r\n\tconst { data, error, loading } = useQuery(NODE, {\r\n\t\tvariables: { id: $nid, language: \"PT_PT\" },\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tconsole.log(\"Error fetching starship\", error);\r\n\t}\r\n\r\n\tif (data != undefined && data != null) {\r\n\t\tlet infoBox = data.page.bundle ? data.page.bundle : \"NULL\";\r\n\t\tconsole.log(data);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View>\r\n\t\t\t<Text>Resultado da query:</Text>\r\n\t\t\t{data != undefined && data.nodeById != null ? (\r\n\t\t\t\t<View>\r\n\t\t\t\t\t<Text> {data.page.title} </Text>\r\n\t\t\t\t\t<Text> {infoBox} </Text>\r\n\t\t\t\t</View>\r\n\t\t\t) : (\r\n\t\t\t\t<Text>Sem resultado.</Text>\r\n\t\t\t)}\r\n\t\t</View>\r\n\t);\r\n}\r\n\r\nexport default class DummyScreen extends React.Component {\r\n\tstatic navigationOptions = {\r\n\t\ttitle: \"Dummy Page\",\r\n\t};\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { navigation } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<View>\r\n\t\t\t\t<Text>Hello world</Text>\r\n\t\t\t\t<ApolloProvider client={client}>\r\n\t\t\t\t\t<ShowNode />\r\n\t\t\t\t</ApolloProvider>\r\n\t\t\t</View>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}